{"ast":null,"code":"import { Subscription } from 'rxjs';\nimport { Chart } from 'chart.js/auto';\nimport * as i0 from \"@angular/core\";\nconst _c0 = [\"mycountryChartChart\"];\nexport class CountryChartComponent {\n  constructor() {\n    this.subscription = new Subscription();\n  }\n  ngAfterViewInit() {\n    console.log(\"Pays reçu dans CountryChartComponent :\", this.country);\n    debugger;\n    if (this.country) {\n      this.createChart();\n    }\n  }\n  createChart() {\n    this.lineChart = new Chart(this.myChart.nativeElement, {\n      type: 'line',\n      data: {\n        labels: this.country.participations.map(p => p.year.toString()),\n        // Années\n        datasets: [{\n          label: 'Médailles',\n          data: this.country.participations.map(p => p.medalsCount),\n          borderColor: '#42A5F5',\n          backgroundColor: 'rgba(66,165,245,0.2)',\n          fill: true\n        }]\n      },\n      options: {\n        responsive: true\n      }\n    });\n  }\n  ngOnDestroy() {\n    this.subscription.unsubscribe(); // Désabonnement propre\n    console.log('ChartComponent détruit, abonnement nettoyé.');\n  }\n  static #_ = this.ɵfac = function CountryChartComponent_Factory(t) {\n    return new (t || CountryChartComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CountryChartComponent,\n    selectors: [[\"app-country-chart\"]],\n    viewQuery: function CountryChartComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.myChart = _t.first);\n      }\n    },\n    inputs: {\n      country: \"country\"\n    },\n    decls: 5,\n    vars: 0,\n    consts: [[\"id\", \"countryChart\"]],\n    template: function CountryChartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"country-chart works!\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(2, \"canvas\", 0);\n        i0.ɵɵelementStart(3, \"p\");\n        i0.ɵɵtext(4, \"tto\");\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["Subscription","Chart","CountryChartComponent","constructor","subscription","ngAfterViewInit","console","log","country","createChart","lineChart","myChart","nativeElement","type","data","labels","participations","map","p","year","toString","datasets","label","medalsCount","borderColor","backgroundColor","fill","options","responsive","ngOnDestroy","unsubscribe","_","_2","selectors","viewQuery","CountryChartComponent_Query","rf","ctx","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement"],"sources":["/Users/elyouzghinajia/devpment/OC/front-app-angular/src/app/pages/country-chart/country-chart.component.ts","/Users/elyouzghinajia/devpment/OC/front-app-angular/src/app/pages/country-chart/country-chart.component.html"],"sourcesContent":["import { Component, AfterViewInit, ElementRef, ViewChild, OnInit,OnDestroy, Input } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { Olympic } from 'src/app/core/models/Olympic';\nimport { OlympicService } from '../../core/services/olympic.service'; // Import du service\nimport { Chart } from 'chart.js/auto';\n\n@Component({\n  selector: 'app-country-chart',\n  templateUrl: './country-chart.component.html',\n  styleUrl: './country-chart.component.scss'\n})\n\nexport class CountryChartComponent implements AfterViewInit, OnDestroy {\n  private subscription: Subscription = new Subscription(); \n  @Input() country!: Olympic; // Récupération des données du pays\n  private lineChart!: Chart; // Instance du graphique, stocke l’objet Chart.js pour pouvoir le manipuler\n\n  ngAfterViewInit(): void {\n    console.log(\"Pays reçu dans CountryChartComponent :\", this.country);\n    debugger\n    if (this.country) {\n      this.createChart();\n    }\n  }\n\n  // const ctx = document.getElementById('countryChart') as HTMLCanvasElement;\n  @ViewChild('mycountryChartChart') myChart!: ElementRef<HTMLCanvasElement>; // Sélectionne l’élément HTML <canvas> avec l’ID #myChart\n  createChart(): void {\n    this.lineChart = new Chart(this.myChart.nativeElement, {\n      type: 'line',\n      data: {\n        labels: this.country.participations.map(p => p.year.toString()), // Années\n        datasets: [{\n          label: 'Médailles',\n          data: this.country.participations.map(p => p.medalsCount),\n          borderColor: '#42A5F5',\n          backgroundColor: 'rgba(66,165,245,0.2)',\n          fill: true\n        }]\n      },\n      options: {\n        responsive: true\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe(); // Désabonnement propre\n    console.log('ChartComponent détruit, abonnement nettoyé.');\n  }\n}\n\n\n\n","<p>country-chart works!</p>\n<canvas id=\"countryChart\"></canvas>\n<p>tto</p>"],"mappings":"AACA,SAASA,YAAY,QAAQ,MAAM;AAGnC,SAASC,KAAK,QAAQ,eAAe;;;AAQrC,OAAM,MAAOC,qBAAqB;EANlCC,YAAA;IAOU,KAAAC,YAAY,GAAiB,IAAIJ,YAAY,EAAE;;EAIvDK,eAAeA,CAAA;IACbC,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAE,IAAI,CAACC,OAAO,CAAC;IACnE;IACA,IAAI,IAAI,CAACA,OAAO,EAAE;MAChB,IAAI,CAACC,WAAW,EAAE;IACpB;EACF;EAIAA,WAAWA,CAAA;IACT,IAAI,CAACC,SAAS,GAAG,IAAIT,KAAK,CAAC,IAAI,CAACU,OAAO,CAACC,aAAa,EAAE;MACrDC,IAAI,EAAE,MAAM;MACZC,IAAI,EAAE;QACJC,MAAM,EAAE,IAAI,CAACP,OAAO,CAACQ,cAAc,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAACC,QAAQ,EAAE,CAAC;QAAE;QACjEC,QAAQ,EAAE,CAAC;UACTC,KAAK,EAAE,WAAW;UAClBR,IAAI,EAAE,IAAI,CAACN,OAAO,CAACQ,cAAc,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACK,WAAW,CAAC;UACzDC,WAAW,EAAE,SAAS;UACtBC,eAAe,EAAE,sBAAsB;UACvCC,IAAI,EAAE;SACP;OACF;MACDC,OAAO,EAAE;QACPC,UAAU,EAAE;;KAEf,CAAC;EACJ;EAEAC,WAAWA,CAAA;IACT,IAAI,CAACzB,YAAY,CAAC0B,WAAW,EAAE,CAAC,CAAC;IACjCxB,OAAO,CAACC,GAAG,CAAC,6CAA6C,CAAC;EAC5D;EAAC,QAAAwB,CAAA,G;qBArCU7B,qBAAqB;EAAA;EAAA,QAAA8B,EAAA,G;UAArB9B,qBAAqB;IAAA+B,SAAA;IAAAC,SAAA,WAAAC,4BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;;;;;;;;;;;;;;;;QCZlCE,EAAA,CAAAC,cAAA,QAAG;QAAAD,EAAA,CAAAE,MAAA,2BAAoB;QAAAF,EAAA,CAAAG,YAAA,EAAI;QAC3BH,EAAA,CAAAI,SAAA,gBAAmC;QACnCJ,EAAA,CAAAC,cAAA,QAAG;QAAAD,EAAA,CAAAE,MAAA,UAAG;QAAAF,EAAA,CAAAG,YAAA,EAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}