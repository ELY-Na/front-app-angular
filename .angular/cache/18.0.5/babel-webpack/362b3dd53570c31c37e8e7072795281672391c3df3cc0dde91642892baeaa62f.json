{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { RouterLink } from '@angular/router';\nimport { catchError } from 'rxjs/operators';\nimport { map } from 'rxjs/operators';\nlet CountryDetailsComponent = class CountryDetailsComponent {\n  constructor(olympicService, route, router) {\n    this.olympicService = olympicService;\n    this.route = route;\n    this.router = router;\n    // Stocker l'abonnement\n    this.subscription = new Subscription();\n  }\n  ngOnInit() {\n    this.olympicService.getNumberOfParticipations().subscribe(numberOfEntries => {\n      this.numberOfEntries = numberOfEntries;\n      console.log(`Nb de participations : ${numberOfEntries}`);\n    });\n    // Récupère l'id via la route et le transforme en number\n    this.countryId = Number(this.route.snapshot.params['id']);\n    // Charger les détails du pays\n    this.countryDetails$ = this.olympicService.getOlympicById(this.countryId).pipe(catchError(() => {\n      this.router.navigate(['/404']); // Redirection en cas d'erreur\n      return [];\n    }));\n    // Charge les détails du pays\n    // this.countryDetails$ = this.olympicService.getOlympicById(this.countryId).pipe(\n    //   tap(country => {\n    //     if (!country) {\n    //       this.router.navigate(['/404']); // Redirection si l'ID est introuvable\n    //     }\n    //   })\n    // );\n    // Calculer le nombre total d'athlètes par pays\n    this.numberOfAthletes$ = this.countryDetails$.pipe(map(country => country ? country.participations.reduce((sum, participation) => sum + participation.athleteCount, 0) : 0));\n    // Calculer le nombre total de medailles par pays\n    this.numberOfMedals$ = this.countryDetails$.pipe(map(country => country ? country.participations.reduce((sum, participation) => sum + participation.medalsCount, 0) : 0));\n    // Calculer le nombre total de medailles par pays\n    this.numberOfEntriesForCountry$ = this.countryDetails$.pipe(map(country => country ? country.participations.length : 0));\n  }\n  ngOnDestroy() {\n    this.subscription.unsubscribe(); // Désabonnement\n    console.log('CountryDetailsComponent détruit, abonnement nettoyé.');\n  }\n};\nCountryDetailsComponent = __decorate([Component({\n  selector: 'app-country-details',\n  templateUrl: './country-details.component.html',\n  styleUrl: './country-details.component.scss',\n  imports: [RouterLink]\n})], CountryDetailsComponent);\nexport { CountryDetailsComponent };","map":{"version":3,"names":["Component","Subscription","RouterLink","catchError","map","CountryDetailsComponent","constructor","olympicService","route","router","subscription","ngOnInit","getNumberOfParticipations","subscribe","numberOfEntries","console","log","countryId","Number","snapshot","params","countryDetails$","getOlympicById","pipe","navigate","numberOfAthletes$","country","participations","reduce","sum","participation","athleteCount","numberOfMedals$","medalsCount","numberOfEntriesForCountry$","length","ngOnDestroy","unsubscribe","__decorate","selector","templateUrl","styleUrl","imports"],"sources":["/Users/elyouzghinajia/devpment/OC/front-app-angular/src/app/pages/country-details/country-details.component.ts"],"sourcesContent":["import { Component, OnInit, OnDestroy, input } from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { ActivatedRoute, Router, RouterLink } from '@angular/router';\nimport { Olympic } from 'src/app/core/models/Olympic';\nimport { OlympicService } from 'src/app/core/services/olympic.service';\nimport { catchError} from 'rxjs/operators';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-country-details',\n  templateUrl: './country-details.component.html',\n  styleUrl: './country-details.component.scss', \n  imports: [\n    RouterLink\n  ]\n})\n\nexport class CountryDetailsComponent implements OnInit{\n  public olympics$!: Observable<Olympic[]>;\n  public countryId!: number;\n  public countryDetails$!: Observable<Olympic | undefined>;\n  public numberOfEntries!: number; // pour tous les pays\n  public numberOfAthletes$!: Observable<number>;\n  public numberOfMedals$!: Observable<number>;\n  public numberOfEntriesForCountry$!: Observable<number>; // pour un seul pays\n\n  // Stocker l'abonnement\n  private subscription: Subscription = new Subscription(); \n\n  constructor(private olympicService: OlympicService, private route: ActivatedRoute, private router: Router) {}\n\n  ngOnInit(): void {\n    this.olympicService.getNumberOfParticipations().subscribe((numberOfEntries: number) => {\n      this.numberOfEntries = numberOfEntries;\n      console.log(`Nb de participations : ${numberOfEntries}`);\n    });\n\n    // Récupère l'id via la route et le transforme en number\n    this.countryId = Number(this.route.snapshot.params['id']);\n\n    // Charger les détails du pays\n    this.countryDetails$! = this.olympicService.getOlympicById(this.countryId).pipe(\n      catchError(() => {\n        this.router.navigate(['/404']); // Redirection en cas d'erreur\n        return [];\n      })\n    );\n\n    // Charge les détails du pays\n    // this.countryDetails$ = this.olympicService.getOlympicById(this.countryId).pipe(\n    //   tap(country => {\n    //     if (!country) {\n    //       this.router.navigate(['/404']); // Redirection si l'ID est introuvable\n    //     }\n    //   })\n    // );\n\n    // Calculer le nombre total d'athlètes par pays\n    this.numberOfAthletes$ = this.countryDetails$.pipe(\n      map(country => country ? country.participations.reduce((sum, participation) => sum + participation.athleteCount, 0) : 0)\n    );\n\n    // Calculer le nombre total de medailles par pays\n    this.numberOfMedals$ = this.countryDetails$.pipe(\n      map(country => country ? country.participations.reduce((sum, participation) => sum + participation.medalsCount, 0) : 0)\n    );\n\n    // Calculer le nombre total de medailles par pays\n    this.numberOfEntriesForCountry$ = this.countryDetails$.pipe(\n      map(country => country ? country.participations.length : 0)\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe(); // Désabonnement\n    console.log('CountryDetailsComponent détruit, abonnement nettoyé.');\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAkC,eAAe;AACnE,SAAqBC,YAAY,QAAQ,MAAM;AAC/C,SAAiCC,UAAU,QAAQ,iBAAiB;AAGpE,SAASC,UAAU,QAAO,gBAAgB;AAC1C,SAASC,GAAG,QAAQ,gBAAgB;AAW7B,IAAMC,uBAAuB,GAA7B,MAAMA,uBAAuB;EAYlCC,YAAoBC,cAA8B,EAAUC,KAAqB,EAAUC,MAAc;IAArF,KAAAF,cAAc,GAAdA,cAAc;IAA0B,KAAAC,KAAK,GAALA,KAAK;IAA0B,KAAAC,MAAM,GAANA,MAAM;IAHjG;IACQ,KAAAC,YAAY,GAAiB,IAAIT,YAAY,EAAE;EAEqD;EAE5GU,QAAQA,CAAA;IACN,IAAI,CAACJ,cAAc,CAACK,yBAAyB,EAAE,CAACC,SAAS,CAAEC,eAAuB,IAAI;MACpF,IAAI,CAACA,eAAe,GAAGA,eAAe;MACtCC,OAAO,CAACC,GAAG,CAAC,0BAA0BF,eAAe,EAAE,CAAC;IAC1D,CAAC,CAAC;IAEF;IACA,IAAI,CAACG,SAAS,GAAGC,MAAM,CAAC,IAAI,CAACV,KAAK,CAACW,QAAQ,CAACC,MAAM,CAAC,IAAI,CAAC,CAAC;IAEzD;IACA,IAAI,CAACC,eAAgB,GAAG,IAAI,CAACd,cAAc,CAACe,cAAc,CAAC,IAAI,CAACL,SAAS,CAAC,CAACM,IAAI,CAC7EpB,UAAU,CAAC,MAAK;MACd,IAAI,CAACM,MAAM,CAACe,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;MAChC,OAAO,EAAE;IACX,CAAC,CAAC,CACH;IAED;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA,IAAI,CAACC,iBAAiB,GAAG,IAAI,CAACJ,eAAe,CAACE,IAAI,CAChDnB,GAAG,CAACsB,OAAO,IAAIA,OAAO,GAAGA,OAAO,CAACC,cAAc,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEC,aAAa,KAAKD,GAAG,GAAGC,aAAa,CAACC,YAAY,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CACzH;IAED;IACA,IAAI,CAACC,eAAe,GAAG,IAAI,CAACX,eAAe,CAACE,IAAI,CAC9CnB,GAAG,CAACsB,OAAO,IAAIA,OAAO,GAAGA,OAAO,CAACC,cAAc,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEC,aAAa,KAAKD,GAAG,GAAGC,aAAa,CAACG,WAAW,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CACxH;IAED;IACA,IAAI,CAACC,0BAA0B,GAAG,IAAI,CAACb,eAAe,CAACE,IAAI,CACzDnB,GAAG,CAACsB,OAAO,IAAIA,OAAO,GAAGA,OAAO,CAACC,cAAc,CAACQ,MAAM,GAAG,CAAC,CAAC,CAC5D;EACH;EAEAC,WAAWA,CAAA;IACT,IAAI,CAAC1B,YAAY,CAAC2B,WAAW,EAAE,CAAC,CAAC;IACjCtB,OAAO,CAACC,GAAG,CAAC,sDAAsD,CAAC;EACrE;CACD;AA5DYX,uBAAuB,GAAAiC,UAAA,EATnCtC,SAAS,CAAC;EACTuC,QAAQ,EAAE,qBAAqB;EAC/BC,WAAW,EAAE,kCAAkC;EAC/CC,QAAQ,EAAE,kCAAkC;EAC5CC,OAAO,EAAE,CACPxC,UAAU;CAEb,CAAC,C,EAEWG,uBAAuB,CA4DnC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}