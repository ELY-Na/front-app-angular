{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map, catchError, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class OlympicService {\n  // ActivatedRoute => Lire les param√®tres de l'URL\t\n  // Router\tChanger de page dynamiquement ie 404 si pas trouver avec id\n  constructor(http, route) {\n    this.http = http;\n    this.route = route;\n    this.olympicUrl = './assets/mock/olympic.json';\n    this.olympics$ = new BehaviorSubject([]);\n  }\n  loadInitialData() {\n    return this.http.get(this.olympicUrl).pipe(tap(value => this.olympics$.next(value)), catchError((error, caught) => {\n      // TODO: improve error handling\n      console.error(error);\n      // Can be useful to end loading state and let the user know something went wrong\n      this.olympics$.next([]);\n      return caught;\n    }));\n  }\n  getOlympicData() {\n    return this.http.get(this.olympicUrl).pipe(map(olympics => {\n      // Pays comme labels\n      const labels = olympics.map(o => o.country);\n      const data = olympics.map(o =>\n      // Somme des m√©dailles\n      o.participations.reduce((sum, p) => sum + p.medalsCount, 0));\n      const ids = olympics.map(o => o.id);\n      // Format adapt√© pour Chart.js\n      return {\n        labels,\n        data,\n        ids\n      };\n    }));\n  }\n  getOlympics() {\n    return this.olympics$.asObservable().pipe(map(olympics => olympics.map(olympic => ({\n      id: olympic.id,\n      country: olympic.country,\n      // Calcul du total des m√©dailles\n      medalsCount: olympic.participations.reduce((sum, p) => sum + p.medalsCount, 0),\n      // Conserve la liste des participations\n      participations: olympic.participations\n    }))));\n  }\n  getNumberOfParticipations() {\n    return this.olympics$.pipe(map(data => {\n      if (data && data.length > 0) {\n        // Trouver le max, spread operator (...) transforme le tableau en liste de valeurs pour Math.max()\n        return Math.max(...data.map(olympic => olympic.participations.length));\n      }\n      // Si aucune donn√©e, on retourne 0\n      return 0;\n    }));\n  }\n  getNumBerOfCountries() {\n    return this.olympics$.pipe(map(data => {\n      return data.map(olympic => olympic.country).length;\n    }));\n  }\n  getOlympicById(countryId) {\n    return this.getOlympics().pipe(\n    // Remplace par ta vraie m√©thode\n    map(data => {\n      console.log(\"üìä Liste compl√®te des pays :\", data);\n      return data.find(country => country.id === countryId) || null;\n    }));\n  }\n  static #_ = this.…µfac = function OlympicService_Factory(t) {\n    return new (t || OlympicService)(i0.…µ…µinject(i1.HttpClient), i0.…µ…µinject(i2.ActivatedRoute));\n  };\n  static #_2 = this.…µprov = /*@__PURE__*/i0.…µ…µdefineInjectable({\n    token: OlympicService,\n    factory: OlympicService.…µfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","map","catchError","tap","OlympicService","constructor","http","route","olympicUrl","olympics$","loadInitialData","get","pipe","value","next","error","caught","console","getOlympicData","olympics","labels","o","country","data","participations","reduce","sum","p","medalsCount","ids","id","getOlympics","asObservable","olympic","getNumberOfParticipations","length","Math","max","getNumBerOfCountries","getOlympicById","countryId","log","find","_","i0","…µ…µinject","i1","HttpClient","i2","ActivatedRoute","_2","factory","…µfac","providedIn"],"sources":["/Users/elyouzghinajia/devpment/OC/front-app-angular/src/app/core/services/olympic.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { Olympic } from '../models/Olympic';\nimport { Observable, map, catchError, tap } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root',\n})\n\nexport class OlympicService {\n  private olympicUrl = './assets/mock/olympic.json';\n  private olympics$ = new BehaviorSubject<Olympic[]>([]);\n\n  // ActivatedRoute => Lire les param√®tres de l'URL\t\n  // Router\tChanger de page dynamiquement ie 404 si pas trouver avec id\n  constructor(private http: HttpClient, private route: ActivatedRoute) {} \n\n  loadInitialData() {\n    return this.http.get<Olympic[]>(this.olympicUrl).pipe(\n      tap((value) => this.olympics$.next(value)),\n      catchError((error, caught) => {\n        // TODO: improve error handling\n        console.error(error);\n        // Can be useful to end loading state and let the user know something went wrong\n        this.olympics$.next([]);\n        return caught;\n      })\n    );\n  }\n\n  getOlympicData(): Observable<{ labels: string[], data: number[], ids: number[] }> {\n    return this.http.get<Olympic[]>(this.olympicUrl).pipe(\n      map((olympics: Olympic[]) => {\n        // Pays comme labels\n        const labels = olympics.map(o => o.country); \n        const data = olympics.map(o =>\n          // Somme des m√©dailles\n          o.participations.reduce((sum, p) => sum + p.medalsCount, 0) \n        );\n        const ids = olympics.map(o => o.id); \n        // Format adapt√© pour Chart.js\n        return { labels, data, ids }; \n      })\n    );\n  }\n\n  getOlympics() { // typer l'observable -> done\n    return this.olympics$.asObservable().pipe(\n      map((olympics: Olympic[]) =>\n        olympics.map(olympic => ({\n          id: olympic.id,\n          country: olympic.country,\n          // Calcul du total des m√©dailles\n          medalsCount: olympic.participations.reduce((sum, p) => sum + p.medalsCount, 0),\n          // Conserve la liste des participations\n          participations: olympic.participations\n        }))\n      )\n    );\n  }\n\n  getNumberOfParticipations(): Observable<number> {\n    return this.olympics$.pipe(\n      map((data: Olympic[]) => {\n        if (data && data.length > 0) {\n          // Trouver le max, spread operator (...) transforme le tableau en liste de valeurs pour Math.max()\n          return Math.max(...data.map(olympic => olympic.participations.length));\n        }\n        // Si aucune donn√©e, on retourne 0\n        return 0; \n      })\n    );\n  }\n\n  getNumBerOfCountries(): Observable<number> {\n    return this.olympics$.pipe(\n      map((data: Olympic[]) => {\n        return data.map(olympic => olympic.country).length;\n      })\n    );\n  }\n\n  getOlympicById(countryId: number): Observable<Olympic | null> {\n    return this.getOlympics().pipe( // Remplace par ta vraie m√©thode\n      map((data: Olympic[]) => {\n        console.log(\"üìä Liste compl√®te des pays :\", data);\n        return data.find(country => country.id === countryId) || null;\n      })\n    );\n  }\n\n  // getCountryDataChart(country: Olympic): Observable<{ labels: string[], data: number[] }> {\n  //   return of(country).pipe(\n  //     map((country: Olympic) => {\n  //       // Ann√©es des participations\n  //       const labels = country.participations.map(p => p.year.toString());\n\n  //       // Nombre de m√©dailles par ann√©e\n  //       const data = country.participations.map(p => p.medalsCount);\n\n  //       console.log(\"üìä Donn√©es du graphique :\", { labels, data });\n\n  //       return { labels, data };\n  //     })\n  //   );\n  // }\n\n  // getCountryDataChart(country: Country[]): Observable<{ labels: string[], data: number[] }> {\n  //   console.log(\"orororo\")\n  //   return this.http.get<Olympic[]>(this.olympicUrl).pipe(\n  //     map((olympics: Olympic[]) => {\n  //       // Pays comme labels\n  //       // const labels = olympics.map(o => o.country); \n  //       // const data = olympics.map(o =>\n  //       //   // Somme des m√©dailles\n  //       //   o.participations.reduce((sum, p) => sum + p.medalsCount, 0) \n  //       // );\n  //       // Format adapt√© pour Chart.js\n  //       // return { labels, data }; \n  //       return true\n  //     })\n  //   );\n  // }\n\n}\n\n\n\n\n\n\n"],"mappings":"AAEA,SAASA,eAAe,QAAQ,MAAM;AAEtC,SAAqBC,GAAG,EAAEC,UAAU,EAAEC,GAAG,QAAQ,MAAM;;;;AAOvD,OAAM,MAAOC,cAAc;EAIzB;EACA;EACAC,YAAoBC,IAAgB,EAAUC,KAAqB;IAA/C,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,KAAK,GAALA,KAAK;IAL3C,KAAAC,UAAU,GAAG,4BAA4B;IACzC,KAAAC,SAAS,GAAG,IAAIT,eAAe,CAAY,EAAE,CAAC;EAIgB;EAEtEU,eAAeA,CAAA;IACb,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAY,IAAI,CAACH,UAAU,CAAC,CAACI,IAAI,CACnDT,GAAG,CAAEU,KAAK,IAAK,IAAI,CAACJ,SAAS,CAACK,IAAI,CAACD,KAAK,CAAC,CAAC,EAC1CX,UAAU,CAAC,CAACa,KAAK,EAAEC,MAAM,KAAI;MAC3B;MACAC,OAAO,CAACF,KAAK,CAACA,KAAK,CAAC;MACpB;MACA,IAAI,CAACN,SAAS,CAACK,IAAI,CAAC,EAAE,CAAC;MACvB,OAAOE,MAAM;IACf,CAAC,CAAC,CACH;EACH;EAEAE,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACZ,IAAI,CAACK,GAAG,CAAY,IAAI,CAACH,UAAU,CAAC,CAACI,IAAI,CACnDX,GAAG,CAAEkB,QAAmB,IAAI;MAC1B;MACA,MAAMC,MAAM,GAAGD,QAAQ,CAAClB,GAAG,CAACoB,CAAC,IAAIA,CAAC,CAACC,OAAO,CAAC;MAC3C,MAAMC,IAAI,GAAGJ,QAAQ,CAAClB,GAAG,CAACoB,CAAC;MACzB;MACAA,CAAC,CAACG,cAAc,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAKD,GAAG,GAAGC,CAAC,CAACC,WAAW,EAAE,CAAC,CAAC,CAC5D;MACD,MAAMC,GAAG,GAAGV,QAAQ,CAAClB,GAAG,CAACoB,CAAC,IAAIA,CAAC,CAACS,EAAE,CAAC;MACnC;MACA,OAAO;QAAEV,MAAM;QAAEG,IAAI;QAAEM;MAAG,CAAE;IAC9B,CAAC,CAAC,CACH;EACH;EAEAE,WAAWA,CAAA;IACT,OAAO,IAAI,CAACtB,SAAS,CAACuB,YAAY,EAAE,CAACpB,IAAI,CACvCX,GAAG,CAAEkB,QAAmB,IACtBA,QAAQ,CAAClB,GAAG,CAACgC,OAAO,KAAK;MACvBH,EAAE,EAAEG,OAAO,CAACH,EAAE;MACdR,OAAO,EAAEW,OAAO,CAACX,OAAO;MACxB;MACAM,WAAW,EAAEK,OAAO,CAACT,cAAc,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAKD,GAAG,GAAGC,CAAC,CAACC,WAAW,EAAE,CAAC,CAAC;MAC9E;MACAJ,cAAc,EAAES,OAAO,CAACT;KACzB,CAAC,CAAC,CACJ,CACF;EACH;EAEAU,yBAAyBA,CAAA;IACvB,OAAO,IAAI,CAACzB,SAAS,CAACG,IAAI,CACxBX,GAAG,CAAEsB,IAAe,IAAI;MACtB,IAAIA,IAAI,IAAIA,IAAI,CAACY,MAAM,GAAG,CAAC,EAAE;QAC3B;QACA,OAAOC,IAAI,CAACC,GAAG,CAAC,GAAGd,IAAI,CAACtB,GAAG,CAACgC,OAAO,IAAIA,OAAO,CAACT,cAAc,CAACW,MAAM,CAAC,CAAC;MACxE;MACA;MACA,OAAO,CAAC;IACV,CAAC,CAAC,CACH;EACH;EAEAG,oBAAoBA,CAAA;IAClB,OAAO,IAAI,CAAC7B,SAAS,CAACG,IAAI,CACxBX,GAAG,CAAEsB,IAAe,IAAI;MACtB,OAAOA,IAAI,CAACtB,GAAG,CAACgC,OAAO,IAAIA,OAAO,CAACX,OAAO,CAAC,CAACa,MAAM;IACpD,CAAC,CAAC,CACH;EACH;EAEAI,cAAcA,CAACC,SAAiB;IAC9B,OAAO,IAAI,CAACT,WAAW,EAAE,CAACnB,IAAI;IAAE;IAC9BX,GAAG,CAAEsB,IAAe,IAAI;MACtBN,OAAO,CAACwB,GAAG,CAAC,8BAA8B,EAAElB,IAAI,CAAC;MACjD,OAAOA,IAAI,CAACmB,IAAI,CAACpB,OAAO,IAAIA,OAAO,CAACQ,EAAE,KAAKU,SAAS,CAAC,IAAI,IAAI;IAC/D,CAAC,CAAC,CACH;EACH;EAAC,QAAAG,CAAA,G;qBAhFUvC,cAAc,EAAAwC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,cAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAd9C,cAAc;IAAA+C,OAAA,EAAd/C,cAAc,CAAAgD,IAAA;IAAAC,UAAA,EAHb;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}