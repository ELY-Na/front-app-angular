{"ast":null,"code":"import { Subscription } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../core/services/olympic.service\";\nimport * as i2 from \"@angular/common\";\nconst _c0 = [\"lineChart\"];\nfunction CountryChartComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"canvas\", 1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"data\", ctx_r0.lineChartData)(\"options\", ctx_r0.lineChartOptions);\n  }\n}\nexport class CountryChartComponent {\n  constructor(olympicService) {\n    this.olympicService = olympicService;\n    this.subscription = new Subscription();\n  } // Ajout de l'injection\n  ngAfterViewInit() {\n    // this.olympicService.getCountryDataChart().subscribe(({ labels, data }) => {\n    //   this.createCountryChart(labels, data); // Passe les données au graphique\n    // });\n    // this.countryDetails$.pipe(\n    //   filter(country => country !== null),\n    //     switchMap(country => this.olympicService.getCountryDataChart(country!))\n    //   ).subscribe(chartData => {\n    //     this.lineChartData.labels = chartData.labels;\n    //     this.lineChartData.datasets[0].data = chartData.data;\n    //   }\n    // );\n    // Chart Country page\n    // createCountryChart(labels: string[], values: number[]): void {\n    // this.lineChart = new Chart(this.lineChartRef.nativeElement, {\n    //   type: 'line',\n    //   data: {\n    //     labels: this.participations.map(p => p.year),\n    //     datasets: [\n    //       {\n    //         label: 'Médailles par année',\n    //         data: this.participations.map(p => p.medalsCount),\n    //         borderColor: 'blue',\n    //         backgroundColor: 'rgba(0, 0, 255, 0.3)',\n    //         fill: true,\n    //         tension: 0.4, // Ajoute un effet de courbure\n    //       },\n    //     ],\n    //   },\n    //   options: {\n    //     responsive: true,\n    //     maintainAspectRatio: false,\n    //   },\n    // });\n  }\n  ngOnDestroy() {\n    this.subscription.unsubscribe(); // Désabonnement propre\n    console.log('ChartComponent détruit, abonnement nettoyé.');\n  }\n  static #_ = this.ɵfac = function CountryChartComponent_Factory(t) {\n    return new (t || CountryChartComponent)(i0.ɵɵdirectiveInject(i1.OlympicService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CountryChartComponent,\n    selectors: [[\"app-country-chart\"]],\n    viewQuery: function CountryChartComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.lineChartRef = _t.first);\n      }\n    },\n    decls: 3,\n    vars: 1,\n    consts: [[4, \"ngIf\"], [\"baseChart\", \"\", \"chartType\", \"line\", 3, \"data\", \"options\"]],\n    template: function CountryChartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"country-chart works!\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(2, CountryChartComponent_div_2_Template, 2, 2, \"div\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.lineChartData.labels.length > 0);\n      }\n    },\n    dependencies: [i2.NgIf],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["Subscription","i0","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵadvance","ɵɵproperty","ctx_r0","lineChartData","lineChartOptions","CountryChartComponent","constructor","olympicService","subscription","ngAfterViewInit","ngOnDestroy","unsubscribe","console","log","_","ɵɵdirectiveInject","i1","OlympicService","_2","selectors","viewQuery","CountryChartComponent_Query","rf","ctx","ɵɵtext","ɵɵtemplate","CountryChartComponent_div_2_Template","labels","length"],"sources":["/Users/elyouzghinajia/devpment/OC/front-app-angular/src/app/pages/country-chart/country-chart.component.ts","/Users/elyouzghinajia/devpment/OC/front-app-angular/src/app/pages/country-chart/country-chart.component.html"],"sourcesContent":["import { Component, AfterViewInit, ElementRef, ViewChild, OnDestroy, Input } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { OlympicService } from '../../core/services/olympic.service'; // Import du service\nimport { Chart } from 'chart.js/auto';\n\n@Component({\n  selector: 'app-country-chart',\n  templateUrl: './country-chart.component.html',\n  styleUrl: './country-chart.component.scss'\n})\nexport class CountryChartComponent implements AfterViewInit, OnDestroy {\n\n  private subscription: Subscription = new Subscription(); \n\n  // Utilisation de ViewChild plus performant que getElementById\n  @ViewChild('lineChart') lineChartRef!: ElementRef<HTMLCanvasElement>;\n\n  constructor(private olympicService: OlympicService) {} // Ajout de l'injection\n\n  private lineChart!: Chart; // Stocke l’objet Chart.js pour pouvoir le manipuler\n\n  ngAfterViewInit() {\n    // this.olympicService.getCountryDataChart().subscribe(({ labels, data }) => {\n    //   this.createCountryChart(labels, data); // Passe les données au graphique\n    // });\n    // this.countryDetails$.pipe(\n    //   filter(country => country !== null),\n    //     switchMap(country => this.olympicService.getCountryDataChart(country!))\n    //   ).subscribe(chartData => {\n    //     this.lineChartData.labels = chartData.labels;\n    //     this.lineChartData.datasets[0].data = chartData.data;\n    //   }\n    // );\n\n\n  // Chart Country page\n  // createCountryChart(labels: string[], values: number[]): void {\n    // this.lineChart = new Chart(this.lineChartRef.nativeElement, {\n    //   type: 'line',\n    //   data: {\n    //     labels: this.participations.map(p => p.year),\n    //     datasets: [\n    //       {\n    //         label: 'Médailles par année',\n    //         data: this.participations.map(p => p.medalsCount),\n    //         borderColor: 'blue',\n    //         backgroundColor: 'rgba(0, 0, 255, 0.3)',\n    //         fill: true,\n    //         tension: 0.4, // Ajoute un effet de courbure\n    //       },\n    //     ],\n    //   },\n    //   options: {\n    //     responsive: true,\n    //     maintainAspectRatio: false,\n    //   },\n    // });\n  \n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe(); // Désabonnement propre\n    console.log('ChartComponent détruit, abonnement nettoyé.');\n  }\n\n}\n","<p>country-chart works!</p>\n<div *ngIf=\"lineChartData.labels.length > 0\">\n  <canvas baseChart [data]=\"lineChartData\" [options]=\"lineChartOptions\" chartType=\"line\">\n  </canvas>\n</div>"],"mappings":"AACA,SAASA,YAAY,QAAQ,MAAM;;;;;;;ICAnCC,EAAA,CAAAC,cAAA,UAA6C;IAC3CD,EAAA,CAAAE,SAAA,gBACS;IACXF,EAAA,CAAAG,YAAA,EAAM;;;;IAFcH,EAAA,CAAAI,SAAA,EAAsB;IAACJ,EAAvB,CAAAK,UAAA,SAAAC,MAAA,CAAAC,aAAA,CAAsB,YAAAD,MAAA,CAAAE,gBAAA,CAA6B;;;ADQvE,OAAM,MAAOC,qBAAqB;EAOhCC,YAAoBC,cAA8B;IAA9B,KAAAA,cAAc,GAAdA,cAAc;IAL1B,KAAAC,YAAY,GAAiB,IAAIb,YAAY,EAAE;EAKF,CAAC,CAAC;EAIvDc,eAAeA,CAAA;IACb;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAGF;IACA;IACE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EAAA;EAIFC,WAAWA,CAAA;IACT,IAAI,CAACF,YAAY,CAACG,WAAW,EAAE,CAAC,CAAC;IACjCC,OAAO,CAACC,GAAG,CAAC,6CAA6C,CAAC;EAC5D;EAAC,QAAAC,CAAA,G;qBArDUT,qBAAqB,EAAAT,EAAA,CAAAmB,iBAAA,CAAAC,EAAA,CAAAC,cAAA;EAAA;EAAA,QAAAC,EAAA,G;UAArBb,qBAAqB;IAAAc,SAAA;IAAAC,SAAA,WAAAC,4BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;;;;;;;;;;;;;QCVlC1B,EAAA,CAAAC,cAAA,QAAG;QAAAD,EAAA,CAAA4B,MAAA,2BAAoB;QAAA5B,EAAA,CAAAG,YAAA,EAAI;QAC3BH,EAAA,CAAA6B,UAAA,IAAAC,oCAAA,iBAA6C;;;QAAvC9B,EAAA,CAAAI,SAAA,GAAqC;QAArCJ,EAAA,CAAAK,UAAA,SAAAsB,GAAA,CAAApB,aAAA,CAAAwB,MAAA,CAAAC,MAAA,KAAqC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}