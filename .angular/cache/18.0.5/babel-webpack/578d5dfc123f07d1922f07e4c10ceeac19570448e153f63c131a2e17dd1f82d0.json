{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class OlympicService {\n  constructor(http, route) {\n    this.http = http;\n    this.route = route;\n    this.olympicUrl = './assets/mock/olympic.json';\n    this.olympics$ = new BehaviorSubject([]);\n  }\n  loadInitialData() {\n    return this.http.get(this.olympicUrl).pipe(tap(value => this.olympics$.next(value)), catchError((error, caught) => {\n      // TODO: improve error handling\n      console.error(error);\n      // can be useful to end loading state and let the user know something went wrong\n      this.olympics$.next([]);\n      return caught;\n    }));\n  }\n  getOlympicData() {\n    return this.http.get(this.olympicUrl).pipe(map(olympics => {\n      const labels = olympics.map(o => o.country); // Pays comme labels\n      const data = olympics.map(o => o.participations.reduce((sum, p) => sum + p.medalsCount, 0) // Somme des médailles\n      );\n      return {\n        labels,\n        data\n      }; // Format adapté pour Chart.js\n    }));\n  }\n  getOlympics() {\n    return this.olympics$.asObservable().pipe(map(olympics => olympics.map(olympic => ({\n      id: olympic.id,\n      country: olympic.country,\n      medalsCount: olympic.participations.reduce((sum, p) => sum + p.medalsCount, 0),\n      // Calcul du total des médailles\n      participations: olympic.participations // Conserve la liste des participations\n    }))));\n  }\n  getNumberOfParticipations() {\n    return this.olympics$.pipe(map(data => {\n      if (data && data.length > 0) {\n        return Math.max(...data.map(olympic => olympic.participations.length)); // Trouver le max, spread operator (...) transforme le tableau en liste de valeurs pour Math.max()\n      }\n      return 0; // Si aucune donnée, on retourne 0\n    }));\n  }\n  getNumBerOfCountries() {\n    return this.olympics$.pipe(map(data => {\n      return data.map(olympic => olympic.country).length;\n    }));\n  }\n  getOlympicById() {\n    console.log('totototototo');\n    console.log('------------------------------------------');\n    console.log('------------------------------------------');\n    console.log('ppppppppppppppppppppppp');\n    console.log('ppppppppppppppppppppppp');\n    console.log('ppppppppppppppppppppppp');\n    console.log('ppppppppppppppppppppppp');\n    console.log(this.route.snapshot.params);\n    console.log('ppppppppppppppppppppppp');\n    console.log('ppppppppppppppppppppppp');\n    console.log('ppppppppppppppppppppppp');\n    console.log('ppppppppppppppppppppppp');\n    // debugger\n    const countryId = this.route.snapshot.params['id'];\n    console.log(countryId);\n    console.log('------------------------------------------');\n    console.log('------------------------------------------');\n    console.log('------------------------------------------');\n    debugger;\n    const superdata = [];\n    const olympicId = this.olympics$.pipe(map(data => {\n      return superdata = data.find(country => country.id === countryId);\n    }));\n  }\n  static #_ = this.ɵfac = function OlympicService_Factory(t) {\n    return new (t || OlympicService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ActivatedRoute));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OlympicService,\n    factory: OlympicService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","catchError","tap","map","OlympicService","constructor","http","route","olympicUrl","olympics$","loadInitialData","get","pipe","value","next","error","caught","console","getOlympicData","olympics","labels","o","country","data","participations","reduce","sum","p","medalsCount","getOlympics","asObservable","olympic","id","getNumberOfParticipations","length","Math","max","getNumBerOfCountries","getOlympicById","log","snapshot","params","countryId","superdata","olympicId","find","_","i0","ɵɵinject","i1","HttpClient","i2","ActivatedRoute","_2","factory","ɵfac","providedIn"],"sources":["/Users/elyouzghinajia/devpment/OC/front-app-angular/src/app/core/services/olympic.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { Olympic } from '../models/Olympic';\nimport { Observable, map } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\n\n\n@Injectable({\n  providedIn: 'root',\n})\n\nexport class OlympicService {\n  private olympicUrl = './assets/mock/olympic.json';\n  private olympics$ = new BehaviorSubject<Olympic[]>([]);\n\n  constructor(private http: HttpClient, private route: ActivatedRoute) {}\n\n  loadInitialData() {\n    return this.http.get<Olympic[]>(this.olympicUrl).pipe(\n      tap((value) => this.olympics$.next(value)),\n      catchError((error, caught) => {\n        // TODO: improve error handling\n        console.error(error);\n        // can be useful to end loading state and let the user know something went wrong\n        this.olympics$.next([]);\n        return caught;\n      })\n    );\n  }\n\n  getOlympicData(): Observable<{ labels: string[], data: number[] }> {\n    return this.http.get<Olympic[]>(this.olympicUrl).pipe(\n      map((olympics: Olympic[]) => {\n        const labels = olympics.map(o => o.country); // Pays comme labels\n        const data = olympics.map(o =>\n          o.participations.reduce((sum, p) => sum + p.medalsCount, 0) // Somme des médailles\n        );\n\n        return { labels, data }; // Format adapté pour Chart.js\n      })\n    );\n  }\n\n  getOlympics() { // typer l'observable -> done\n    return this.olympics$.asObservable().pipe(\n      map((olympics: Olympic[]) =>\n        olympics.map(olympic => ({\n          id: olympic.id,\n          country: olympic.country,\n          medalsCount: olympic.participations.reduce((sum, p) => sum + p.medalsCount, 0), // Calcul du total des médailles\n          participations: olympic.participations // Conserve la liste des participations\n        }))\n      )\n    );\n  }\n\n  getNumberOfParticipations(): Observable<number> {\n    return this.olympics$.pipe(\n      map((data: Olympic[]) => {\n        if (data && data.length > 0) {\n          return Math.max(...data.map(olympic => olympic.participations.length)); // Trouver le max, spread operator (...) transforme le tableau en liste de valeurs pour Math.max()\n        }\n        return 0; // Si aucune donnée, on retourne 0\n      })\n    );\n  }\n\n  getNumBerOfCountries() {\n    return this.olympics$.pipe(\n      map((data: Olympic[]) => {\n        return data.map(olympic => olympic.country).length;\n      })\n    );\n  }\n\n  getOlympicById() {\n    console.log('totototototo')\n    console.log('------------------------------------------')\n    console.log('------------------------------------------')\n    console.log('ppppppppppppppppppppppp')\n    console.log('ppppppppppppppppppppppp')\n    console.log('ppppppppppppppppppppppp')\n    console.log('ppppppppppppppppppppppp')\n    console.log(this.route.snapshot.params)\n    console.log('ppppppppppppppppppppppp')\n    console.log('ppppppppppppppppppppppp')\n    console.log('ppppppppppppppppppppppp')\n    console.log('ppppppppppppppppppppppp')\n    // debugger\n    const countryId = this.route.snapshot.params['id'];\n    console.log(countryId);\n    console.log('------------------------------------------')\n    console.log('------------------------------------------')\n    console.log('------------------------------------------')\n\n    debugger\n    const superdata = []\n    const olympicId = this.olympics$.pipe(\n      map((data: Olympic[]) => {\n        return superdata = data.find(country => country.id === countryId);\n      })\n    );\n  }\n\n  // getNumberOfAtheles() {\n  //   return this.olympics$.pipe(\n  //     map((data: Olympic[]) => {\n  //       // return data.map(olympic => olympic.participations.reduce((sum, p) => sum + p.medalsCount, 0));\n  //       return data.map(olympic => olympic.country).length;\n  //     })\n  //   );\n  // }\n\n\n  // getNumberOfJo à créer pour récupérer num jo -> done \n  // onDestroy à utiliser pour observable voir OnInit et l'ajouter  -> done\n  // getNumberOfJOs à créer pour num comtry -> done \n  // ajouter getOlypicById à typer aussi pour -> \n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}