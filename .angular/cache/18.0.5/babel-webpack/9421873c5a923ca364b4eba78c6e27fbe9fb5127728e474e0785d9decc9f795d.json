{"ast":null,"code":"import { Chart } from 'chart.js/auto';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../core/services/olympic.service\";\nconst _c0 = [\"myChart\"];\nexport class ChartComponent {\n  constructor(olympicService) {\n    this.olympicService = olympicService;\n  } // Ajout de l'injection\n  ngAfterViewInit() {\n    this.olympicService.getOlympicData().subscribe(({\n      labels,\n      data\n    }) => {\n      this.createChart(labels, data); // Passe les données au graphique\n    });\n  }\n  createChart(labels, values) {\n    this.chart = new Chart(this.myChart.nativeElement, {\n      type: 'pie',\n      // this.chartType as ChartType\n      data: {\n        labels: labels,\n        // Utilisation des labels dynamiques\n        datasets: [{\n          label: 'Medal per country',\n          data: values,\n          // Utilisation des valeurs dynamiques\n          borderWidth: 1,\n          backgroundColor: ['red', 'blue', 'yellow', 'green', 'purple']\n        }]\n      },\n      options: {\n        responsive: true,\n        plugins: {\n          legend: {\n            labels: {\n              font: {\n                size: 20\n              }\n            }\n          }\n        }\n      }\n    });\n  }\n  static #_ = this.ɵfac = function ChartComponent_Factory(t) {\n    return new (t || ChartComponent)(i0.ɵɵdirectiveInject(i1.OlympicService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ChartComponent,\n    selectors: [[\"app-chart\"]],\n    viewQuery: function ChartComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.myChart = _t.first);\n      }\n    },\n    decls: 3,\n    vars: 0,\n    consts: [[\"myChart\", \"\"], [2, \"height\", \"40vh\", \"width\", \"40vw\"]],\n    template: function ChartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\");\n        i0.ɵɵelement(1, \"canvas\", 1, 0);\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\"div[_ngcontent-%COMP%] {\\n  padding: 30px;\\n  display: flex;\\n}\\n\\ncanvas[_ngcontent-%COMP%] {\\n  justify-content: center;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcGFnZXMvY2hhcnQvY2hhcnQuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxhQUFBO0VBQ0EsYUFBQTtBQUNGOztBQUVBO0VBQ0UsdUJBQUE7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbImRpdiB7XG4gIHBhZGRpbmc6IDMwcHg7XG4gIGRpc3BsYXk6IGZsZXg7XG59XG5cbmNhbnZhcyB7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}","map":{"version":3,"names":["Chart","ChartComponent","constructor","olympicService","ngAfterViewInit","getOlympicData","subscribe","labels","data","createChart","values","chart","myChart","nativeElement","type","datasets","label","borderWidth","backgroundColor","options","responsive","plugins","legend","font","size","_","i0","ɵɵdirectiveInject","i1","OlympicService","_2","selectors","viewQuery","ChartComponent_Query","rf","ctx","ɵɵelementStart","ɵɵelement","ɵɵelementEnd"],"sources":["/Users/elyouzghinajia/devpment/OC/front-app-angular/src/app/pages/chart/chart.component.ts","/Users/elyouzghinajia/devpment/OC/front-app-angular/src/app/pages/chart/chart.component.html"],"sourcesContent":["import { Component, AfterViewInit, ElementRef, ViewChild, Input } from '@angular/core';\nimport { OlympicService } from '../../core/services/olympic.service'; // Import du service\nimport { Chart, ChartType } from 'chart.js/auto';\n\n@Component({ // Création du component\n  selector: 'app-chart',\n  templateUrl: './chart.component.html',\n  styleUrl: './chart.component.scss'\n})\n\nexport class ChartComponent implements AfterViewInit {\n  // Utilisation de ViewChild plus performant que getElementById\n  @ViewChild('myChart') myChart!: ElementRef<HTMLCanvasElement>; // Sélectionne l’élément HTML <canvas> avec l’ID #myChart\n\n  constructor(private olympicService: OlympicService) {} // Ajout de l'injection\n\n  chart!: Chart; // Stocke l’objet Chart.js pour pouvoir le manipuler\n\n  ngAfterViewInit() {\n    this.olympicService.getOlympicData().subscribe(({ labels, data }) => {\n      this.createChart(labels, data); // Passe les données au graphique\n    });\n  }\n\n  createChart(labels: string[], values: number[]) {\n    this.chart = new Chart(this.myChart.nativeElement, {\n      type: 'pie',  // this.chartType as ChartType\n      data: {\n        labels: labels, // Utilisation des labels dynamiques\n        datasets: [{\n          label: 'Medal per country',\n          data: values, // Utilisation des valeurs dynamiques\n          borderWidth: 1,\n          backgroundColor: ['red', 'blue', 'yellow', 'green', 'purple']\n        }]\n      },\n      options: {\n        responsive: true,\n        plugins: {\n          legend: {\n            labels: {\n              font: {\n                size: 20\n              }\n              \n            }\n          }\n        }\n      }\n    });\n  }\n}\n","<div>\n  <canvas style=\"height:40vh; width:40vw;\" #myChart></canvas>\n</div>"],"mappings":"AAEA,SAASA,KAAK,QAAmB,eAAe;;;;AAQhD,OAAM,MAAOC,cAAc;EAIzBC,YAAoBC,cAA8B;IAA9B,KAAAA,cAAc,GAAdA,cAAc;EAAmB,CAAC,CAAC;EAIvDC,eAAeA,CAAA;IACb,IAAI,CAACD,cAAc,CAACE,cAAc,EAAE,CAACC,SAAS,CAAC,CAAC;MAAEC,MAAM;MAAEC;IAAI,CAAE,KAAI;MAClE,IAAI,CAACC,WAAW,CAACF,MAAM,EAAEC,IAAI,CAAC,CAAC,CAAC;IAClC,CAAC,CAAC;EACJ;EAEAC,WAAWA,CAACF,MAAgB,EAAEG,MAAgB;IAC5C,IAAI,CAACC,KAAK,GAAG,IAAIX,KAAK,CAAC,IAAI,CAACY,OAAO,CAACC,aAAa,EAAE;MACjDC,IAAI,EAAE,KAAK;MAAG;MACdN,IAAI,EAAE;QACJD,MAAM,EAAEA,MAAM;QAAE;QAChBQ,QAAQ,EAAE,CAAC;UACTC,KAAK,EAAE,mBAAmB;UAC1BR,IAAI,EAAEE,MAAM;UAAE;UACdO,WAAW,EAAE,CAAC;UACdC,eAAe,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ;SAC7D;OACF;MACDC,OAAO,EAAE;QACPC,UAAU,EAAE,IAAI;QAChBC,OAAO,EAAE;UACPC,MAAM,EAAE;YACNf,MAAM,EAAE;cACNgB,IAAI,EAAE;gBACJC,IAAI,EAAE;;;;;;KAOjB,CAAC;EACJ;EAAC,QAAAC,CAAA,G;qBAxCUxB,cAAc,EAAAyB,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,cAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAd7B,cAAc;IAAA8B,SAAA;IAAAC,SAAA,WAAAC,qBAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;;;;;;;;;;;;;QCV3BR,EAAA,CAAAU,cAAA,UAAK;QACHV,EAAA,CAAAW,SAAA,mBAA2D;QAC7DX,EAAA,CAAAY,YAAA,EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}