{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild, Input } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { Chart } from 'chart.js/auto';\nlet ChartComponent = class ChartComponent {\n  constructor(olympicService, router) {\n    this.olympicService = olympicService;\n    this.router = router;\n    // Stocker l'abonnement\n    this.subscription = new Subscription();\n  } // Ajout de l'injection\n  ngAfterViewInit() {\n    this.olympicService.getOlympicData().subscribe(({\n      labels,\n      data\n    }) => {\n      this.createChart(labels, data); // Passe les données au graphique\n    });\n  }\n  // Chart home page\n  createChart(labels, values) {\n    this.chart = new Chart(this.myChart.nativeElement, {\n      type: 'pie',\n      // this.chartType as ChartType\n      data: {\n        labels: labels,\n        // Utilisation des labels dynamiques\n        datasets: [{\n          label: 'Medal per country',\n          data: values,\n          // Utilisation des valeurs dynamiques\n          borderWidth: 1,\n          backgroundColor: ['red', 'blue', 'yellow', 'green', 'purple']\n        }]\n      },\n      options: {\n        layout: {\n          padding: 20\n        },\n        responsive: true,\n        plugins: {\n          legend: {\n            labels: {\n              font: {\n                size: Math.max(10, window.innerWidth * 0.018) // Adapte la font-size de la legende: responsiveness\n                ,\n\n                // Adapte la font-size de la legende: responsiveness\n                onClick: (event, elements) => this.onChartClick(event, elements)\n              }\n            }\n          }\n        }\n      }\n    });\n  }\n  onChartClick(event, elements) {\n    if (elements.length > 0) {\n      const index = elements[0].index;\n      const countryId = this.countries[index].id;\n      // Rediriger vers la page de détails du pays\n      this.router.navigate([`/country/${countryId}`]);\n    }\n  }\n  ngOnDestroy() {\n    this.subscription.unsubscribe(); // Désabonnement propre\n    console.log('ChartComponent détruit, abonnement nettoyé.');\n  }\n};\n__decorate([Input()], ChartComponent.prototype, \"participations\", void 0);\n__decorate([ViewChild('myChart')], ChartComponent.prototype, \"myChart\", void 0);\nChartComponent = __decorate([Component({\n  selector: 'app-chart',\n  templateUrl: './chart.component.html',\n  styleUrl: './chart.component.scss'\n})], ChartComponent);\nexport { ChartComponent };","map":{"version":3,"names":["Component","ViewChild","Input","Subscription","Chart","ChartComponent","constructor","olympicService","router","subscription","ngAfterViewInit","getOlympicData","subscribe","labels","data","createChart","values","chart","myChart","nativeElement","type","datasets","label","borderWidth","backgroundColor","options","layout","padding","responsive","plugins","legend","font","size","Math","max","window","innerWidth","onClick","event","elements","onChartClick","length","index","countryId","countries","id","navigate","ngOnDestroy","unsubscribe","console","log","__decorate","selector","templateUrl","styleUrl"],"sources":["/Users/elyouzghinajia/devpment/OC/front-app-angular/src/app/pages/chart/chart.component.ts"],"sourcesContent":["import { Component, AfterViewInit, ElementRef, ViewChild, OnDestroy, Input } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { OlympicService } from '../../core/services/olympic.service'; // Import du service\nimport { Chart } from 'chart.js/auto';\n\n@Component({ // Création du component\n  selector: 'app-chart',\n  templateUrl: './chart.component.html',\n  styleUrl: './chart.component.scss'\n})\n\nexport class ChartComponent implements AfterViewInit, OnDestroy {\n  // Médaille par année\n  @Input() participations!: { year: number; medalsCount: number }[]; \n  // Stocker l'abonnement\n  private subscription: Subscription = new Subscription(); \n\n  // Utilisation de ViewChild plus performant que getElementById\n  @ViewChild('myChart') myChart!: ElementRef<HTMLCanvasElement>; // Sélectionne l’élément HTML <canvas> avec l’ID #myChart\n\n  constructor(private olympicService: OlympicService, private router: Router) {} // Ajout de l'injection\n\n  private chart!: Chart; // Stocke l’objet Chart.js pour pouvoir le manipuler\n\n  ngAfterViewInit() {\n    this.olympicService.getOlympicData().subscribe(({ labels, data }) => {\n      this.createChart(labels, data); // Passe les données au graphique\n    });\n  }\n\n  // Chart home page\n  createChart(labels: string[], values: number[]) {\n    this.chart = new Chart(this.myChart.nativeElement, {\n      type: 'pie',  // this.chartType as ChartType\n      data: {\n        labels: labels, // Utilisation des labels dynamiques\n        datasets: [{\n          label: 'Medal per country',\n          data: values, // Utilisation des valeurs dynamiques\n          borderWidth: 1,\n          backgroundColor: ['red', 'blue', 'yellow', 'green', 'purple']\n        }]\n      },\n      options: {\n        layout: {\n          padding: 20\n        },\n        responsive: true,\n        plugins: {\n          legend: {\n            labels: {\n              font: {\n                size: Math.max(10, window.innerWidth * 0.018) // Adapte la font-size de la legende: responsiveness\n                onClick: (event: any, elements: any[]) => this.onChartClick(event, elements)\n              }\n            }\n          }\n        }\n      }\n    });\n  }\n\n   onChartClick(event: any, elements: any[]): void {\n    if (elements.length > 0) {\n      const index = elements[0].index;\n      const countryId = this.countries[index].id;\n      // Rediriger vers la page de détails du pays\n      this.router.navigate([`/country/${countryId}`]);\n    }\n  }\n\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe(); // Désabonnement propre\n    console.log('ChartComponent détruit, abonnement nettoyé.');\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,EAA6BC,SAAS,EAAaC,KAAK,QAAQ,eAAe;AACjG,SAASC,YAAY,QAAQ,MAAM;AAEnC,SAASC,KAAK,QAAQ,eAAe;AAQ9B,IAAMC,cAAc,GAApB,MAAMA,cAAc;EASzBC,YAAoBC,cAA8B,EAAUC,MAAc;IAAtD,KAAAD,cAAc,GAAdA,cAAc;IAA0B,KAAAC,MAAM,GAANA,MAAM;IANlE;IACQ,KAAAC,YAAY,GAAiB,IAAIN,YAAY,EAAE;EAKsB,CAAC,CAAC;EAI/EO,eAAeA,CAAA;IACb,IAAI,CAACH,cAAc,CAACI,cAAc,EAAE,CAACC,SAAS,CAAC,CAAC;MAAEC,MAAM;MAAEC;IAAI,CAAE,KAAI;MAClE,IAAI,CAACC,WAAW,CAACF,MAAM,EAAEC,IAAI,CAAC,CAAC,CAAC;IAClC,CAAC,CAAC;EACJ;EAEA;EACAC,WAAWA,CAACF,MAAgB,EAAEG,MAAgB;IAC5C,IAAI,CAACC,KAAK,GAAG,IAAIb,KAAK,CAAC,IAAI,CAACc,OAAO,CAACC,aAAa,EAAE;MACjDC,IAAI,EAAE,KAAK;MAAG;MACdN,IAAI,EAAE;QACJD,MAAM,EAAEA,MAAM;QAAE;QAChBQ,QAAQ,EAAE,CAAC;UACTC,KAAK,EAAE,mBAAmB;UAC1BR,IAAI,EAAEE,MAAM;UAAE;UACdO,WAAW,EAAE,CAAC;UACdC,eAAe,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ;SAC7D;OACF;MACDC,OAAO,EAAE;QACPC,MAAM,EAAE;UACNC,OAAO,EAAE;SACV;QACDC,UAAU,EAAE,IAAI;QAChBC,OAAO,EAAE;UACPC,MAAM,EAAE;YACNjB,MAAM,EAAE;cACNkB,IAAI,EAAE;gBACJC,IAAI,EAAEC,IAAI,CAACC,GAAG,CAAC,EAAE,EAAEC,MAAM,CAACC,UAAU,GAAG,KAAK,CAAC,CAAC;gBAAA;;gBAAA;gBAC9CC,OAAO,EAAEA,CAACC,KAAU,EAAEC,QAAe,KAAK,IAAI,CAACC,YAAY,CAACF,KAAK,EAAEC,QAAQ;;;;;;KAMtF,CAAC;EACJ;EAECC,YAAYA,CAACF,KAAU,EAAEC,QAAe;IACvC,IAAIA,QAAQ,CAACE,MAAM,GAAG,CAAC,EAAE;MACvB,MAAMC,KAAK,GAAGH,QAAQ,CAAC,CAAC,CAAC,CAACG,KAAK;MAC/B,MAAMC,SAAS,GAAG,IAAI,CAACC,SAAS,CAACF,KAAK,CAAC,CAACG,EAAE;MAC1C;MACA,IAAI,CAACrC,MAAM,CAACsC,QAAQ,CAAC,CAAC,YAAYH,SAAS,EAAE,CAAC,CAAC;IACjD;EACF;EAGAI,WAAWA,CAAA;IACT,IAAI,CAACtC,YAAY,CAACuC,WAAW,EAAE,CAAC,CAAC;IACjCC,OAAO,CAACC,GAAG,CAAC,6CAA6C,CAAC;EAC5D;CACD;AA/DUC,UAAA,EAARjD,KAAK,EAAE,C,qDAA0D;AAK5CiD,UAAA,EAArBlD,SAAS,CAAC,SAAS,CAAC,C,8CAAyC;AAPnDI,cAAc,GAAA8C,UAAA,EAN1BnD,SAAS,CAAC;EACToD,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,QAAQ,EAAE;CACX,CAAC,C,EAEWjD,cAAc,CAiE1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}