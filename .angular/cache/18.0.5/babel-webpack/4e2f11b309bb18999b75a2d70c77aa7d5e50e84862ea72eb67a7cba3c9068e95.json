{"ast":null,"code":"import { Subscription } from 'rxjs';\nimport { Chart } from 'chart.js/auto';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../core/services/olympic.service\";\nconst _c0 = [\"myChart\"];\nconst _c1 = [\"lineChart\"];\nexport class ChartComponent {\n  constructor(olympicService) {\n    this.olympicService = olympicService;\n    // Stocker l'abonnement\n    this.subscription = new Subscription();\n  } // Ajout de l'injection\n  ngAfterViewInit() {\n    this.olympicService.getOlympicData().subscribe(({\n      labels,\n      data\n    }) => {\n      this.createChart(labels, data); // Passe les données au graphique\n    });\n  }\n  // Chart home page\n  createChart(labels, values) {\n    this.chart = new Chart(this.myChart.nativeElement, {\n      type: 'pie',\n      // this.chartType as ChartType\n      data: {\n        labels: labels,\n        // Utilisation des labels dynamiques\n        datasets: [{\n          label: 'Medal per country',\n          data: values,\n          // Utilisation des valeurs dynamiques\n          borderWidth: 1,\n          backgroundColor: ['red', 'blue', 'yellow', 'green', 'purple']\n        }]\n      },\n      options: {\n        layout: {\n          padding: 20\n        },\n        responsive: true,\n        plugins: {\n          legend: {\n            labels: {\n              font: {\n                size: Math.max(10, window.innerWidth * 0.018) // Adapte la font-size de la legende: responsiveness\n              }\n            }\n          }\n        }\n      }\n    });\n  }\n  // Chart Country page\n  createCountryChart() {\n    this.lineChart = new Chart(this.lineChartRef.nativeElement, {\n      type: 'line',\n      data: {\n        labels: this.participations.map(p => p.year),\n        datasets: [{\n          label: 'Médailles par année',\n          data: this.participations.map(p => p.medalsCount),\n          borderColor: 'blue',\n          backgroundColor: 'rgba(0, 0, 255, 0.3)',\n          fill: true,\n          tension: 0.4 // Ajoute un effet de courbure\n        }]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false\n      }\n    });\n  }\n  ngOnDestroy() {\n    this.subscription.unsubscribe(); // Désabonnement propre\n    console.log('ChartComponent détruit, abonnement nettoyé.');\n  }\n  static #_ = this.ɵfac = function ChartComponent_Factory(t) {\n    return new (t || ChartComponent)(i0.ɵɵdirectiveInject(i1.OlympicService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ChartComponent,\n    selectors: [[\"app-chart\"]],\n    viewQuery: function ChartComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.myChart = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.lineChartRef = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.myCountryChart = _t.first);\n      }\n    },\n    decls: 6,\n    vars: 0,\n    consts: [[\"myChart\", \"\"], [\"lineChart\", \"\"], [2, \"height\", \"40vh\", \"width\", \"40vw\"], [2, \"width\", \"600px\", \"height\", \"400px\"]],\n    template: function ChartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\");\n        i0.ɵɵelement(1, \"canvas\", 2, 0);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵelement(4, \"canvas\", null, 1);\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\"div[_ngcontent-%COMP%] {\\n  padding: 30px;\\n  display: flex;\\n}\\n\\ncanvas[_ngcontent-%COMP%] {\\n  justify-content: center;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcGFnZXMvY2hhcnQvY2hhcnQuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxhQUFBO0VBQ0EsYUFBQTtBQUNGOztBQUVBO0VBQ0UsdUJBQUE7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbImRpdiB7XG4gIHBhZGRpbmc6IDMwcHg7XG4gIGRpc3BsYXk6IGZsZXg7XG59XG5cbmNhbnZhcyB7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}","map":{"version":3,"names":["Subscription","Chart","ChartComponent","constructor","olympicService","subscription","ngAfterViewInit","getOlympicData","subscribe","labels","data","createChart","values","chart","myChart","nativeElement","type","datasets","label","borderWidth","backgroundColor","options","layout","padding","responsive","plugins","legend","font","size","Math","max","window","innerWidth","createCountryChart","lineChart","lineChartRef","participations","map","p","year","medalsCount","borderColor","fill","tension","maintainAspectRatio","ngOnDestroy","unsubscribe","console","log","_","i0","ɵɵdirectiveInject","i1","OlympicService","_2","selectors","viewQuery","ChartComponent_Query","rf","ctx","ɵɵelementStart","ɵɵelement","ɵɵelementEnd"],"sources":["/Users/elyouzghinajia/devpment/OC/front-app-angular/src/app/pages/chart/chart.component.ts","/Users/elyouzghinajia/devpment/OC/front-app-angular/src/app/pages/chart/chart.component.html"],"sourcesContent":["import { Component, AfterViewInit, ElementRef, ViewChild, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { OlympicService } from '../../core/services/olympic.service'; // Import du service\nimport { Chart } from 'chart.js/auto';\n\n@Component({ // Création du component\n  selector: 'app-chart',\n  templateUrl: './chart.component.html',\n  styleUrl: './chart.component.scss'\n})\n\nexport class ChartComponent implements AfterViewInit, OnDestroy {\n  // Stocker l'abonnement\n  private subscription: Subscription = new Subscription(); \n\n  // Utilisation de ViewChild plus performant que getElementById\n  @ViewChild('myChart') myChart!: ElementRef<HTMLCanvasElement>; // Sélectionne l’élément HTML <canvas> avec l’ID #myChart\n  @ViewChild('lineChart') lineChartRef!: ElementRef;\n  @ViewChild('myChart') myCountryChart!: ElementRef<HTMLCanvasElement>; // Sélectionne l’élément HTML <canvas> avec l’ID #myCountryChart\n\n  constructor(private olympicService: OlympicService) {} // Ajout de l'injection\n\n  private chart!: Chart; // Stocke l’objet Chart.js pour pouvoir le manipuler\n  private lineChart!: Chart;\n\n  ngAfterViewInit() {\n    this.olympicService.getOlympicData().subscribe(({ labels, data }) => {\n      this.createChart(labels, data); // Passe les données au graphique\n    });\n  }\n\n  // Chart home page\n  createChart(labels: string[], values: number[]) {\n    this.chart = new Chart(this.myChart.nativeElement, {\n      type: 'pie',  // this.chartType as ChartType\n      data: {\n        labels: labels, // Utilisation des labels dynamiques\n        datasets: [{\n          label: 'Medal per country',\n          data: values, // Utilisation des valeurs dynamiques\n          borderWidth: 1,\n          backgroundColor: ['red', 'blue', 'yellow', 'green', 'purple']\n        }]\n      },\n      options: {\n        layout: {\n          padding: 20\n        },\n        responsive: true,\n        plugins: {\n          legend: {\n            labels: {\n              font: {\n                size: Math.max(10, window.innerWidth * 0.018) // Adapte la font-size de la legende: responsiveness\n              }\n            }\n          }\n        }\n      }\n    });\n  }\n\n  // Chart Country page\n  createCountryChart(): void {\n    this.lineChart = new Chart(this.lineChartRef.nativeElement, {\n      type: 'line',\n      data: {\n        labels: this.participations.map(p => p.year),\n        datasets: [\n          {\n            label: 'Médailles par année',\n            data: this.participations.map(p => p.medalsCount),\n            borderColor: 'blue',\n            backgroundColor: 'rgba(0, 0, 255, 0.3)',\n            fill: true,\n            tension: 0.4, // Ajoute un effet de courbure\n          },\n        ],\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n      },\n    });\n  }\n\n\n  \n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe(); // Désabonnement propre\n    console.log('ChartComponent détruit, abonnement nettoyé.');\n  }\n}\n","<div>\n  <canvas style=\"height:40vh; width:40vw;\" #myChart></canvas>\n</div>\n\n<div style=\"width: 600px; height: 400px;\">\n  <canvas #lineChart></canvas>\n</div>"],"mappings":"AACA,SAASA,YAAY,QAAQ,MAAM;AAEnC,SAASC,KAAK,QAAQ,eAAe;;;;;AAQrC,OAAM,MAAOC,cAAc;EASzBC,YAAoBC,cAA8B;IAA9B,KAAAA,cAAc,GAAdA,cAAc;IARlC;IACQ,KAAAC,YAAY,GAAiB,IAAIL,YAAY,EAAE;EAOF,CAAC,CAAC;EAKvDM,eAAeA,CAAA;IACb,IAAI,CAACF,cAAc,CAACG,cAAc,EAAE,CAACC,SAAS,CAAC,CAAC;MAAEC,MAAM;MAAEC;IAAI,CAAE,KAAI;MAClE,IAAI,CAACC,WAAW,CAACF,MAAM,EAAEC,IAAI,CAAC,CAAC,CAAC;IAClC,CAAC,CAAC;EACJ;EAEA;EACAC,WAAWA,CAACF,MAAgB,EAAEG,MAAgB;IAC5C,IAAI,CAACC,KAAK,GAAG,IAAIZ,KAAK,CAAC,IAAI,CAACa,OAAO,CAACC,aAAa,EAAE;MACjDC,IAAI,EAAE,KAAK;MAAG;MACdN,IAAI,EAAE;QACJD,MAAM,EAAEA,MAAM;QAAE;QAChBQ,QAAQ,EAAE,CAAC;UACTC,KAAK,EAAE,mBAAmB;UAC1BR,IAAI,EAAEE,MAAM;UAAE;UACdO,WAAW,EAAE,CAAC;UACdC,eAAe,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ;SAC7D;OACF;MACDC,OAAO,EAAE;QACPC,MAAM,EAAE;UACNC,OAAO,EAAE;SACV;QACDC,UAAU,EAAE,IAAI;QAChBC,OAAO,EAAE;UACPC,MAAM,EAAE;YACNjB,MAAM,EAAE;cACNkB,IAAI,EAAE;gBACJC,IAAI,EAAEC,IAAI,CAACC,GAAG,CAAC,EAAE,EAAEC,MAAM,CAACC,UAAU,GAAG,KAAK,CAAC,CAAC;;;;;;KAMzD,CAAC;EACJ;EAEA;EACAC,kBAAkBA,CAAA;IAChB,IAAI,CAACC,SAAS,GAAG,IAAIjC,KAAK,CAAC,IAAI,CAACkC,YAAY,CAACpB,aAAa,EAAE;MAC1DC,IAAI,EAAE,MAAM;MACZN,IAAI,EAAE;QACJD,MAAM,EAAE,IAAI,CAAC2B,cAAc,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC;QAC5CtB,QAAQ,EAAE,CACR;UACEC,KAAK,EAAE,qBAAqB;UAC5BR,IAAI,EAAE,IAAI,CAAC0B,cAAc,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACE,WAAW,CAAC;UACjDC,WAAW,EAAE,MAAM;UACnBrB,eAAe,EAAE,sBAAsB;UACvCsB,IAAI,EAAE,IAAI;UACVC,OAAO,EAAE,GAAG,CAAE;SACf;OAEJ;MACDtB,OAAO,EAAE;QACPG,UAAU,EAAE,IAAI;QAChBoB,mBAAmB,EAAE;;KAExB,CAAC;EACJ;EAKAC,WAAWA,CAAA;IACT,IAAI,CAACxC,YAAY,CAACyC,WAAW,EAAE,CAAC,CAAC;IACjCC,OAAO,CAACC,GAAG,CAAC,6CAA6C,CAAC;EAC5D;EAAC,QAAAC,CAAA,G;qBAjFU/C,cAAc,EAAAgD,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,cAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAdpD,cAAc;IAAAqD,SAAA;IAAAC,SAAA,WAAAC,qBAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;;;;;;;;;;;;;;;;;QCX3BR,EAAA,CAAAU,cAAA,UAAK;QACHV,EAAA,CAAAW,SAAA,mBAA2D;QAC7DX,EAAA,CAAAY,YAAA,EAAM;QAENZ,EAAA,CAAAU,cAAA,aAA0C;QACxCV,EAAA,CAAAW,SAAA,sBAA4B;QAC9BX,EAAA,CAAAY,YAAA,EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}