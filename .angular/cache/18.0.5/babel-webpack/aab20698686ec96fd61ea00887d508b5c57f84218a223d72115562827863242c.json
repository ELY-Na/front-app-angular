{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { map } from 'rxjs';\nlet OlympicService = class OlympicService {\n  constructor(http, route, router) {\n    this.http = http;\n    this.route = route;\n    this.router = router;\n    this.olympicUrl = './assets/mock/olympic.json';\n    this.olympics$ = new BehaviorSubject([]);\n  }\n  loadInitialData() {\n    return this.http.get(this.olympicUrl).pipe(tap(value => this.olympics$.next(value)), catchError((error, caught) => {\n      // TODO: improve error handling\n      console.error(error);\n      // can be useful to end loading state and let the user know something went wrong\n      this.olympics$.next([]);\n      return caught;\n    }));\n  }\n  getOlympicData() {\n    return this.http.get(this.olympicUrl).pipe(map(olympics => {\n      const labels = olympics.map(o => o.country); // Pays comme labels\n      const data = olympics.map(o => o.participations.reduce((sum, p) => sum + p.medalsCount, 0) // Somme des médailles\n      );\n      return {\n        labels,\n        data\n      }; // Format adapté pour Chart.js\n    }));\n  }\n  getOlympics() {\n    return this.olympics$.asObservable().pipe(map(olympics => olympics.map(olympic => ({\n      id: olympic.id,\n      country: olympic.country,\n      medalsCount: olympic.participations.reduce((sum, p) => sum + p.medalsCount, 0),\n      // Calcul du total des médailles\n      participations: olympic.participations // Conserve la liste des participations\n    }))));\n  }\n  getNumberOfParticipations() {\n    return this.olympics$.pipe(map(data => {\n      if (data && data.length > 0) {\n        return Math.max(...data.map(olympic => olympic.participations.length)); // Trouver le max, spread operator (...) transforme le tableau en liste de valeurs pour Math.max()\n      }\n      return 0; // Si aucune donnée, on retourne 0\n    }));\n  }\n  getNumBerOfCountries() {\n    return this.olympics$.pipe(map(data => {\n      return data.map(olympic => olympic.country).length;\n    }));\n  }\n  getOlympicById(countryId) {\n    return this.olympics$.pipe(map(data => {\n      if (data) {\n        data.find(country => country.id === countryId);\n      }\n      return;\n    }));\n  }\n};\nOlympicService = __decorate([Injectable({\n  providedIn: 'root'\n})], OlympicService);\nexport { OlympicService };\n//  console.log('totototototo')\n//     console.log('------------------------------------------')\n//     console.log('------------------------------------------')\n//     console.log('ppppppppppppppppppppppp')\n//     console.log('ppppppppppppppppppppppp')\n//     console.log('ppppppppppppppppppppppp')\n//     console.log('ppppppppppppppppppppppp')\n//     console.log(this.route.snapshot.params)\n//     console.log('ppppppppppppppppppppppp')\n//     console.log('ppppppppppppppppppppppp')\n//     console.log('ppppppppppppppppppppppp')\n//     console.log('ppppppppppppppppppppppp')\n//     // debugger\n//     // console.log(countryId);\n//     console.log('------------------------------------------')\n//     console.log('------------------------------------------')\n//     console.log('------------------------------------------')","map":{"version":3,"names":["Injectable","BehaviorSubject","catchError","tap","map","OlympicService","constructor","http","route","router","olympicUrl","olympics$","loadInitialData","get","pipe","value","next","error","caught","console","getOlympicData","olympics","labels","o","country","data","participations","reduce","sum","p","medalsCount","getOlympics","asObservable","olympic","id","getNumberOfParticipations","length","Math","max","getNumBerOfCountries","getOlympicById","countryId","find","__decorate","providedIn"],"sources":["/Users/elyouzghinajia/devpment/OC/front-app-angular/src/app/core/services/olympic.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { Olympic } from '../models/Olympic';\nimport { Observable, map } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\n\n\n@Injectable({\n  providedIn: 'root',\n})\n\nexport class OlympicService {\n  private olympicUrl = './assets/mock/olympic.json';\n  private olympics$ = new BehaviorSubject<Olympic[]>([]);\n\n  constructor(private http: HttpClient, private route: ActivatedRoute, private router: Router) {}\n\n  loadInitialData() {\n    return this.http.get<Olympic[]>(this.olympicUrl).pipe(\n      tap((value) => this.olympics$.next(value)),\n      catchError((error, caught) => {\n        // TODO: improve error handling\n        console.error(error);\n        // can be useful to end loading state and let the user know something went wrong\n        this.olympics$.next([]);\n        return caught;\n      })\n    );\n  }\n\n  getOlympicData(): Observable<{ labels: string[], data: number[] }> {\n    return this.http.get<Olympic[]>(this.olympicUrl).pipe(\n      map((olympics: Olympic[]) => {\n        const labels = olympics.map(o => o.country); // Pays comme labels\n        const data = olympics.map(o =>\n          o.participations.reduce((sum, p) => sum + p.medalsCount, 0) // Somme des médailles\n        );\n\n        return { labels, data }; // Format adapté pour Chart.js\n      })\n    );\n  }\n\n  getOlympics() { // typer l'observable -> done\n    return this.olympics$.asObservable().pipe(\n      map((olympics: Olympic[]) =>\n        olympics.map(olympic => ({\n          id: olympic.id,\n          country: olympic.country,\n          medalsCount: olympic.participations.reduce((sum, p) => sum + p.medalsCount, 0), // Calcul du total des médailles\n          participations: olympic.participations // Conserve la liste des participations\n        }))\n      )\n    );\n  }\n\n  getNumberOfParticipations(): Observable<number> {\n    return this.olympics$.pipe(\n      map((data: Olympic[]) => {\n        if (data && data.length > 0) {\n          return Math.max(...data.map(olympic => olympic.participations.length)); // Trouver le max, spread operator (...) transforme le tableau en liste de valeurs pour Math.max()\n        }\n        return 0; // Si aucune donnée, on retourne 0\n      })\n    );\n  }\n\n  getNumBerOfCountries(): Observable<number> {\n    return this.olympics$.pipe(\n      map((data: Olympic[]) => {\n        return data.map(olympic => olympic.country).length;\n      })\n    );\n  }\n\n  getOlympicById(countryId: number): Observable<Olympic> {\n    return this.olympics$.pipe(\n      map((data: Olympic[]) => {\n        if (data) {\n          data.find(country => country.id === countryId);\n        }\n        return \n      })\n    );\n  }\n\n  // getNumberOfAtheles() {\n  //   return this.olympics$.pipe(\n  //     map((data: Olympic[]) => {\n  //       // return data.map(olympic => olympic.participations.reduce((sum, p) => sum + p.medalsCount, 0));\n  //       return data.map(olympic => olympic.country).length;\n  //     })\n  //   );\n  // }\n\n\n  // getNumberOfJo à créer pour récupérer num jo -> done \n  // onDestroy à utiliser pour observable voir OnInit et l'ajouter  -> done\n  // getNumberOfJOs à créer pour num comtry -> done \n  // ajouter getOlypicById à typer aussi pour -> \n}\n\n//  console.log('totototototo')\n//     console.log('------------------------------------------')\n//     console.log('------------------------------------------')\n//     console.log('ppppppppppppppppppppppp')\n//     console.log('ppppppppppppppppppppppp')\n//     console.log('ppppppppppppppppppppppp')\n//     console.log('ppppppppppppppppppppppp')\n//     console.log(this.route.snapshot.params)\n//     console.log('ppppppppppppppppppppppp')\n//     console.log('ppppppppppppppppppppppp')\n//     console.log('ppppppppppppppppppppppp')\n//     console.log('ppppppppppppppppppppppp')\n//     // debugger\n   \n//     // console.log(countryId);\n//     console.log('------------------------------------------')\n//     console.log('------------------------------------------')\n//     console.log('------------------------------------------')\n\n\n\n\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}