{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { map } from 'rxjs/operators';\nlet CountryDetailsComponent = class CountryDetailsComponent {\n  constructor(olympicService, route, router, location // Ajout de Location pour revenir à la page précédente pas forcément à home\n  ) {\n    this.olympicService = olympicService;\n    this.route = route;\n    this.router = router;\n    this.location = location;\n    // Configuration des données pour le Line Chart\n    this.lineChartData = {\n      labels: [],\n      // Années\n      datasets: [{\n        data: [],\n        // Nombre de médailles\n        label: 'Médailles',\n        borderColor: '#42A5F5',\n        backgroundColor: 'rgba(66,165,245,0.2)',\n        fill: true\n      }]\n    };\n    // Options du graphique\n    this.lineChartOptions = {\n      responsive: true\n    };\n    // Stocker l'abonnement\n    this.subscription = new Subscription();\n  }\n  ngOnInit() {\n    this.olympicService.getNumberOfParticipations().subscribe(numberOfEntries => {\n      this.numberOfEntries = numberOfEntries;\n      console.log(`Nb de participations : ${numberOfEntries}`);\n    });\n    // Récupère l'id via la route et le transforme en number\n    this.countryId = Number(this.route.snapshot.params['id']);\n    // Charger les détails du pays\n    this.countryDetails$ = this.olympicService.getOlympicById(this.countryId).pipe(catchError(() => {\n      this.router.navigate(['/404']); // Redirection en cas d'erreur\n      return [];\n    }));\n    // Calculer le nombre total d'athlètes par pays\n    this.numberOfAthletes$ = this.countryDetails$.pipe(map(country => country ? country.participations.reduce((sum, participation) => sum + participation.athleteCount, 0) : 0));\n    // Calculer le nombre total de medailles par pays\n    this.numberOfMedals$ = this.countryDetails$.pipe(map(country => country ? country.participations.reduce((sum, participation) => sum + participation.medalsCount, 0) : 0));\n    // Calculer le nombre total de medailles par pays\n    this.numberOfEntriesForCountry$ = this.countryDetails$.pipe(map(country => country ? country.participations.length : 0));\n    // Charger les détails du pays\n    this.olympicService.getOlympicById(this.countryId).subscribe(country => {\n      if (country) {\n        // Mettre à jour les données du graphique avec les participations\n        this.lineChartData.labels = country.participations.map(p => p.year.toString()); // Années\n        this.lineChartData.datasets[0].data = country.participations.map(p => p.medalsCount); // Médailles\n      }\n    });\n  }\n  // Revient à la page précédente\n  goBack() {\n    this.location.back();\n  }\n  // Désabonnement\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    console.log('CountryDetailsComponent détruit, abonnement nettoyé.');\n  }\n};\nCountryDetailsComponent = __decorate([Component({\n  selector: 'app-country-details',\n  templateUrl: './country-details.component.html',\n  styleUrl: './country-details.component.scss'\n})], CountryDetailsComponent);\nexport { CountryDetailsComponent };","map":{"version":3,"names":["Component","Subscription","catchError","map","CountryDetailsComponent","constructor","olympicService","route","router","location","lineChartData","labels","datasets","data","label","borderColor","backgroundColor","fill","lineChartOptions","responsive","subscription","ngOnInit","getNumberOfParticipations","subscribe","numberOfEntries","console","log","countryId","Number","snapshot","params","countryDetails$","getOlympicById","pipe","navigate","numberOfAthletes$","country","participations","reduce","sum","participation","athleteCount","numberOfMedals$","medalsCount","numberOfEntriesForCountry$","length","p","year","toString","goBack","back","ngOnDestroy","unsubscribe","__decorate","selector","templateUrl","styleUrl"],"sources":["/Users/elyouzghinajia/devpment/OC/front-app-angular/src/app/pages/country-details/country-details.component.ts"],"sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Location } from '@angular/common';\nimport { Olympic } from 'src/app/core/models/Olympic';\nimport { OlympicService } from 'src/app/core/services/olympic.service';\nimport { catchError} from 'rxjs/operators';\nimport { map } from 'rxjs/operators';\nimport { ChartData, ChartOptions } from 'chart.js';\n\n@Component({\n  selector: 'app-country-details',\n  templateUrl: './country-details.component.html',\n  styleUrl: './country-details.component.scss'\n})\n\nexport class CountryDetailsComponent implements OnInit{\n  public olympics$!: Observable<Olympic[]>;\n  public countryId!: number;\n  public countryDetails$!: Observable<Olympic | undefined>;\n  public numberOfEntries!: number; // pour tous les pays\n  public numberOfAthletes$!: Observable<number>;\n  public numberOfMedals$!: Observable<number>;\n  public numberOfEntriesForCountry$!: Observable<number>; // pour un seul pays\n\n  // Configuration des données pour le Line Chart\n  public lineChartData: ChartData<'line'> = {\n    labels: [], // Années\n    datasets: [\n      {\n        data: [], // Nombre de médailles\n        label: 'Médailles',\n        borderColor: '#42A5F5',\n        backgroundColor: 'rgba(66,165,245,0.2)',\n        fill: true,\n      },\n    ],\n  };\n\n  // Options du graphique\n  public lineChartOptions: ChartOptions<'line'> = {\n    responsive: true,\n  };\n\n  // Stocker l'abonnement\n  private subscription: Subscription = new Subscription(); \n\n  constructor(\n    private olympicService: OlympicService, \n    private route: ActivatedRoute, \n    private router: Router,\n    private location: Location // Ajout de Location pour revenir à la page précédente pas forcément à home\n  ) {}\n\n  ngOnInit(): void {\n    this.olympicService.getNumberOfParticipations().subscribe((numberOfEntries: number) => {\n      this.numberOfEntries = numberOfEntries;\n      console.log(`Nb de participations : ${numberOfEntries}`);\n    });\n\n    // Récupère l'id via la route et le transforme en number\n    this.countryId = Number(this.route.snapshot.params['id']);\n\n    // Charger les détails du pays\n    this.countryDetails$! = this.olympicService.getOlympicById(this.countryId).pipe(\n      catchError(() => {\n        this.router.navigate(['/404']); // Redirection en cas d'erreur\n        return [];\n      })\n    );\n\n    // Calculer le nombre total d'athlètes par pays\n    this.numberOfAthletes$ = this.countryDetails$.pipe(\n      map(country => country ? country.participations.reduce((sum, participation) => sum + participation.athleteCount, 0) : 0)\n    );\n\n    // Calculer le nombre total de medailles par pays\n    this.numberOfMedals$ = this.countryDetails$.pipe(\n      map(country => country ? country.participations.reduce((sum, participation) => sum + participation.medalsCount, 0) : 0)\n    );\n\n    // Calculer le nombre total de medailles par pays\n    this.numberOfEntriesForCountry$ = this.countryDetails$.pipe(\n      map(country => country ? country.participations.length : 0)\n    );\n\n    // Charger les détails du pays\n    this.olympicService.getOlympicById(this.countryId).subscribe((country) => {\n      if (country) {\n        // Mettre à jour les données du graphique avec les participations\n        this.lineChartData.labels = country.participations.map(p => p.year.toString()); // Années\n        this.lineChartData.datasets[0].data = country.participations.map(p => p.medalsCount); // Médailles\n      }\n    });\n  }\n\n  // Revient à la page précédente\n  goBack(): void {\n    this.location.back(); \n  }\n    \n  // Désabonnement\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe(); \n    console.log('CountryDetailsComponent détruit, abonnement nettoyé.');\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}